[build-system]
requires = ["poetry_core"]
build-backend = "poetry.core.masonry.api"

[project]
requires-python = ">=3.9,<3.14"
name = "flama"
version = "1.9.8"
description = "Fire up your models with the flame ðŸ”¥"
license = { text = "Apache-2.0" }
readme = "README.md"
authors = [
  { name = "JosÃ© Antonio Perdiguero LÃ³pez", email = "perdy@perdy.io" },
  { name = "Miguel A. DurÃ¡n Olivencia", email = "migduroli@gmail.com" },
]
maintainers = [
  { name = "JosÃ© Antonio Perdiguero LÃ³pez", email = "perdy@perdy.io" },
  { name = "Miguel A. DurÃ¡n Olivencia", email = "migduroli@gmail.com" },
]
keywords = [
  "machine-learning",
  "ml",
  "ml-ops",
  "mlops",
  "api",
  "rest",
  "restful",
  "openapi",
  "tensorflow",
  "pytorch",
  "sklearn",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
  "starlette (>=0.31,<1.0.0)",
  "click (>=8.1,<9.0)",
  "uvicorn[standard] (>=0.23,<1.0.0)",
  "Jinja2 (>=3.1.2,<4.0)",
  "pyyaml (>=6.0,<7.0)",
  "typing-extensions (>=4.4,<5.0) ; python_version < '3.10'",
]

[project.urls]
repository = "https://github.com/vortico/flama"
homepage = "https://flama.dev"
documentation = "https://flama.dev/docs/"

[project.optional-dependencies]
pydantic = ["pydantic (>=2.0,<3.0)"]
typesystem = ["typesystem (>=0.4.1,<1.0)"]
marshmallow = ["marshmallow (>=3.0,<4.0)", "apispec (>=6.0,<7.0)"]
database = ["SQLAlchemy[asyncio] (>=2.0,<3.0)"]
client = ["httpx (>=0.25,<1.0)"]
full = [
  "pydantic (>=2.0,<3.0)",
  "typesystem (>=0.4.1,<1.0)",
  "marshmallow (>=3.0,<4.0)",
  "apispec (>=6.0,<7.0)",
  "SQLAlchemy[asyncio] (>=2.0,<3.0)",
  "httpx (>=0.25,<1.0)",
]

[project.scripts]
flama = 'flama.cli.__main__:cli'

[tool.poetry]
include = [
  { path = "flama", format = [
    "sdist",
    "wheel",
  ] },
  { path = "flama/templates/**/*", format = [
    "sdist",
    "wheel",
  ] },
]
exclude = []

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^8.3"
pytest-xdist = { version = "^3.3", extras = ["psutil"] }
pytest-cov = "^6.0"
pytest-asyncio = "^0.24"
ipython = "^8.0"
ruff = "^0.9.6"
pyright = "^1.1.393"
pre-commit = "^3.4"
python-multipart = "^0.0.6"
httpx = ">=0.25,<1.0.0"
aiosqlite = ">=0.19.0,<1.0.0"
Faker = "^8.2"
SQLAlchemy = { version = "^2.0", extras = ["asyncio"] }
gevent = "^23.9.1"

[tool.poetry.group.schemas]
optional = true

[tool.poetry.group.schemas.dependencies]
pydantic = "^2.4"
marshmallow = "^3.20"
apispec = "^6.3"
typesystem = "^0.4"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies] # Only testable on linux and before 3.13, because numpy old versions are not providing binaries
scikit-learn = { version = "~1.5.2", platform = "linux", python = ">=3.9,<3.13" }
tensorflow-cpu = { version = "~2.17.0", platform = "linux", python = ">=3.9,<3.13" }
torch = { version = "~2.5.0", platform = "linux", python = ">=3.9,<3.13" }

[tool.ruff]
line-length = 120
exclude = [
  ".git",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
  ".venv",
  "buck-out",
  "build",
  "dist",
  "node_modules",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["C90", "E", "F", "G", "I", "W", "T", "UP"]
ignore = ["E721"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pyright]
include = ["flama"]
exclude = ["**/node_modules", "**/__pycache__"]
reportWildcardImportFromLibrary = false
reportPrivateImportUsage = false

[tool.pytest.ini_options]
minversion = 3
addopts = "--dist=loadfile --junitxml=./test-results/pytest/results.xml --no-cov-on-fail --cov-report=html --cov-report=xml --cov-report=term-missing --cov-config=pyproject.toml --cov=. --pdbcls=IPython.terminal.debugger:TerminalPdb -nauto"
norecursedirs = ["*settings*", "*urls*", "*docs*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.coverage.run]
source = ["flama"]
branch = true
omit = [
  ".venv*",
  "*settings*",
  "*__init__.py",
  "*__main__.py",
  "tests/*",
  "examples/*",
  "flama/compat.py",
  "flama/cli/*",
  "flama/types/*",
  "flama/*/types.py",
  "build.py",
]
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
show_missing = true
skip_covered = true
ignore_errors = true
fail_under = 90
exclude_lines = [
  "noqa",
  "pragma: no cover",
  "pass",
  "\\.\\.\\.",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "def __repr__",
  "def __str__",
  "if cls\\.debug",
  "if settings\\.DEBUG",
  "if (typing\\.|t\\.)?TYPE_CHECKING:",
]

[tool.coverage.paths]
source = ["./"]

[tool.coverage.html]
directory = "./test-results/coverage_html/"

[tool.coverage.xml]
output = "./test-results/coverage.xml"

[tool.coverage.json]
output = "./test-results/coverage.json"
