[project]
name = "flama"
version = "1.12.1"
description = "Fire up your models with the flame ðŸ”¥"
license = { text = "Apache-2.0" }
readme = "README.md"
authors = [
  { name = "JosÃ© Antonio Perdiguero LÃ³pez", email = "perdy@perdy.io" },
  { name = "Miguel A. DurÃ¡n Olivencia", email = "migduroli@gmail.com" },
]
maintainers = [
  { name = "JosÃ© Antonio Perdiguero LÃ³pez", email = "perdy@perdy.io" },
  { name = "Miguel A. DurÃ¡n Olivencia", email = "migduroli@gmail.com" },
]
keywords = [
  "machine-learning",
  "ml",
  "mlops",
  "ai",
  "ddd",
  "api",
  "rest",
  "restful",
  "openapi",
  "tensorflow",
  "pytorch",
  "sklearn",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.10,<3.15"
dependencies = [
  "starlette>=0.48,<1.0.0",
  "click>=8.1,<9.0",
  "uvicorn[standard]>=0.38,<1.0.0",
  "Jinja2>=3.1.2,<4.0",
  "pyyaml>=6.0,<7.0",
  "typing-extensions>=4.15,<5.0; python_version < '3.14'", # PORT: Replace compat when stop supporting 3.13
  "tomli>=2.3.0,<3.0; python_version < '3.11'",            # PORT: Replace compat when stop supporting 3.10
  "zstd>=1.5.7,<2.0; python_version < '3.14'",             # PORT: Replace compat when stop supporting 3.13
]

[project.urls]
repository = "https://github.com/vortico/flama"
homepage = "https://flama.dev"
documentation = "https://flama.dev/docs/"

[project.optional-dependencies]
pydantic = ["pydantic>=2.12,<3.0"]
typesystem = ["typesystem>=0.4.1,<1.0"]
marshmallow = ["marshmallow>=3.0,<4.0", "apispec>=6.0,<7.0"]
database = ["SQLAlchemy[asyncio]>=2.0,<3.0"]
client = ["httpx>=0.28,<1.0"]
full = [
  "pydantic>=2.12,<3.0",
  "typesystem>=0.4.1,<1.0",
  "marshmallow>=3.0,<4.0",
  "apispec>=6.0,<7.0",
  "SQLAlchemy[asyncio]>=2.0,<3.0",
  "httpx>=0.28,<1.0.0",
]

[project.scripts]
flama = 'flama.cli.__main__:cli'

[dependency-groups]
dev = [
  "pytest>=8.4",
  "pytest-xdist[psutil]>=3.8",
  "pytest-cov>=7.0",
  "pytest-asyncio>=1.2",
  "ipython>=8.0,<9.0; python_version < '3.11'",
  "ipython>=9.6; python_version >= '3.11'",
  "ruff>=0.14.1",
  "pyright>=1.1.406",
  "pre-commit>=4.3",
  "python-multipart>=0.0.20",
  "aiosqlite>=0.21.0,<1.0.0",
  "Faker>=37.11",
  "gevent>=25.9.1",
  "scikit-learn>=1.7.2",
  "tensorflow>=2.20.0; python_version < '3.14'",
  "torch>=2.9.0; python_version < '3.14'",
]

[build-system]
requires = ["hatchling", "hatch-build-scripts"]
build-backend = "hatchling.build"

[tool.hatch.build]
exclude = [
  ".github",
  ".gitignore",
  ".dockerignore",
  "CHANGELOG.md",
  "CODE_OF_CONDUCT.md",
  "CONTRIBUTING.md",
  "SECURITY.md",
]
artifacts = ["flama/templates/**/*"]

[[tool.hatch.build.hooks.build-scripts.scripts]]
work_dir = "templates"
commands = ["npm i", "npm run build"]
artifacts = ["flama/templates/"]

[tool.ruff]
line-length = 120
exclude = [
  ".git",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
  ".venv",
  "buck-out",
  "build",
  "dist",
  "node_modules",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["C90", "E", "F", "G", "I", "W", "T", "UP"]
ignore = ["E721"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pyright]
include = ["flama"]
exclude = ["**/node_modules", "**/__pycache__"]
reportWildcardImportFromLibrary = false
reportPrivateImportUsage = false

[tool.pytest.ini_options]
minversion = "3"
addopts = "--dist=loadfile --junitxml=./test-results/pytest/results.xml --no-cov-on-fail --cov-report=html --cov-report=xml --cov-report=term-missing --cov-config=pyproject.toml --cov=. --pdbcls=IPython.terminal.debugger:TerminalPdb -nauto"
norecursedirs = ["*settings*", "*urls*", "*docs*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.coverage.run]
source = ["flama"]
branch = true
omit = [
  ".venv*",
  "*settings*",
  "*__init__.py",
  "*__main__.py",
  "tests/*",
  "examples/*",
  "flama/compat.py",
  "flama/cli/*",
  "flama/types/*",
  "flama/*/types.py",
  "build.py",
]
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
show_missing = true
skip_covered = true
ignore_errors = true
fail_under = 90
exclude_lines = [
  "noqa",
  "pragma: no cover",
  "pass",
  "\\.\\.\\.",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "def __repr__",
  "def __str__",
  "if cls\\.debug",
  "if settings\\.DEBUG",
  "if (typing\\.|t\\.)?TYPE_CHECKING:",
]

[tool.coverage.paths]
source = ["./"]

[tool.coverage.html]
directory = "./test-results/coverage_html/"

[tool.coverage.xml]
output = "./test-results/coverage.xml"

[tool.coverage.json]
output = "./test-results/coverage.json"
